/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    FoodNet Trends Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input options – these should be supplied at runtime or via a custom config
    mmwrFile         = null                // Path to FoodNet MMWR SAS data file (or preprocessed CSV if preprocessed flag is TRUE)
    censusFile_B     = null                // Path to census data for bacterial pathogens
    censusFile_P     = null                // Path to census data for parasitic pathogens
    travel           = "NO,UNKNOWN,YES"    // Travel types (e.g., "NO,UNKNOWN,YES")
    cidt             = "CIDT+,CX+,PARASITIC" // CIDT types (e.g., "CIDT+,CX+,PARASITIC")
    projID           = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) // Auto-generated timestamp if not provided
    whichScript      = "${launchDir}/bin/trendy.R"      // Path to the main R modeling script
   // whichFunctions   = "${launchDir}/bin/functions.R"     // Path to helper functions file

    // New parameters for optional preprocessing
    preprocessed     = false               // Boolean flag; set to TRUE if using a preprocessed CSV file
    cleanFile        = null                // Path to the cleaned CSV file (if preprocessed is TRUE)
    skip_preprocessing = false             // Set to true to skip the preprocessing step

    // Output directory – the pipeline will use this as a base. The R script creates projID/SplineResults inside it.
    outdir           = "output"            // Default to "output" directory if none specified

    // Boilerplate options
    publish_dir_mode = 'copy'
    email            = null
    email_on_fail    = null
    plaintext_email  = false
    monochrome_logs  = false
    hook_url         = null
    help             = false
    version          = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options – defaults only, expecting to be overwritten
    max_memory       = '128.GB'
    max_cpus         = 32
    max_time         = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/cdc-dev.config'

// Load nf-core custom profiles from different institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load cdc/spline custom profiles (uncomment only if available)
// try {
//   includeConfig "${params.custom_config_base}/pipeline/spline.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/spline profiles: ${params.custom_config_base}/pipeline/spline.config")
// }

profiles {
    debug {
        dumpHashes           = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup              = false
        nextflow.enable.configProcessNamesValidation = true
    }
    test { includeConfig 'conf/test.config' }
}

// Set default registry for Apptainer, Docker, Podman, and Singularity
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Export these environment variables to prevent conflicts with local libraries
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
    R_LIBS           = "/opt/conda/envs/FootNetTreands_R/lib/R/library"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Process-specific resource requirements
process {
    // Default settings for all processes
    cpus = { check_max(1 * task.attempt, 'cpus') }
    memory = { check_max(8.GB * task.attempt, 'memory') }
    time = { check_max(4.h * task.attempt, 'time') }
    
    // Process-specific settings
    withName: 'TRENDY' {
        cpus = { check_max(16 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }
        time = { check_max(72.h * task.attempt, 'time') }
    }
}

// Disable process selector warnings by default (use debug profile to enable warnings)
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/${params.projID}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/${params.projID}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/${params.projID}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/${params.projID}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'FoodNet Trends'
    author          = """Your Name or Team"""
    homePage        = 'https://github.com/your-repo/FoodNetTrends'
    description     = """FoodNet Trends Modeling Pipeline using Nextflow"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't exceed a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

