# Load required libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidybayes)
library(HDInterval)

# Define custom functions

# Load packages function (if necessary)
LOAD_PACKAGES <- function() {
  required_packages <- c('dplyr', 'tidyr', 'ggplot2', 'tidybayes', 'HDInterval')
  for (pkg in required_packages) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg)
      library(pkg, character.only = TRUE)
    }
  }
}

PATH_ANALYSIS <- function(mmwrdata, census, outBase) {
  # Print column names
  print("Column names in mmwrdata:")
  print(names(mmwrdata))
  print("Column names in census:")
  print(names(census))
  
  # Ensure data types match and create 'state' and 'year' columns
  mmwrdata <- mmwrdata %>%
    mutate(
      state = as.character(State),
      year = as.integer(Year)
    )
  
  census <- census %>%
    mutate(
      state = as.character(State),
      year = as.integer(Year)
    )
  
  # Merge and process data
  mergedDf <- mmwrdata %>%
    inner_join(census, by = c("state", "year")) %>%
    # Replace 'existing_column' with an actual column name
    mutate(cases_per_population = Cases / Population * 100000)
  
  # Save merged data
  saveFile <- file.path(outBase, "mmwrdata.csv")
  write.csv(mergedDf, saveFile, row.names = FALSE)
  
  return(mergedDf)
}

# PROPOSED_BM function
PROPOSED_BM <- function(data) {
  # Define the model formula
  formula <- bf(count ~ s(yearn, bs = "ps") + offset(log(population)), family = poisson())
  # Fit the model
  model <- brm(formula, data = data, chains = 4, cores = 4)
  return(model)
}

# LINPRED_DRAW_FN function
LINPRED_DRAW_FN <- function(data, model) {
  linpred <- data %>%
    add_predicted_draws(model, re_formula = NA, allow_new_levels = TRUE)
  return(linpred)
}

# Additional functions can be added here, ensuring they accept necessary arguments
# and do not rely on global variables


